const cam = document.getElementById('cam')
const startVideo = () => {
    navigator.mediaDevices.enumerateDevices()
    .then(devices => {
        if (Array.isArray(devices)) {
            devices.forEach(device => {
                if (device.kind === 'videoinput') {

                    if (device.label.includes(device.label)) {
                        navigator.getUserMedia(
                            { video: {
                                deviceId: device.deviceId
                            }},
                            stream => cam.srcObject = stream,
                            error => console.error(error)
                        )
                    }
                }
            })
        }
    })
}

const loadLabels = async () => {
    const url = './src/controllers/ajax/getPersonData.ajax.php'
    const responseLabels = await getPersonRegistrations("POST", url);
    const labels = JSON.parse("[" + responseLabels + "]")[0];
    console.log(labels)
    // const labels = makeRequest()

    return Promise.all(labels.map(async label => {
        const descriptions = []
        for (let i = 1; i <= 2; i++) {
            const img = await faceapi.fetchImage(`./src/assets/lib/face-api/labels/${label}/${i}.jpg`)
            const detections = await faceapi
                .detectSingleFace(img)
                .withFaceLandmarks()
                .withFaceDescriptor()
            descriptions.push(detections.descriptor)
        }
        return new faceapi.LabeledFaceDescriptors(label, descriptions)
    }))
}

Promise.all([
    faceapi.nets.tinyFaceDetector.loadFromUri('./src/assets/lib/face-api/models'),
    faceapi.nets.faceLandmark68Net.loadFromUri('./src/assets/lib/face-api/models'),
    faceapi.nets.faceRecognitionNet.loadFromUri('./src/assets/lib/face-api/models'),
    faceapi.nets.faceExpressionNet.loadFromUri('./src/assets/lib/face-api/models'),
    faceapi.nets.ageGenderNet.loadFromUri('./src/assets/lib/face-api/models'),
    faceapi.nets.ssdMobilenetv1.loadFromUri('./src/assets/lib/face-api/models'),
]).then(startVideo)

let resulado = cam.addEventListener('play', async () => {
    const canvas = faceapi.createCanvasFromMedia(cam)
    const canvasSize = {
        width: cam.width,
        height: cam.height
    }
    const labels = await loadLabels()
    faceapi.matchDimensions(canvas, canvasSize)
    document.body.appendChild(canvas)
    
    setInterval(async () => {
        const detections = await faceapi
            .detectAllFaces(
                cam,
                new faceapi.TinyFaceDetectorOptions()
            )
            .withFaceLandmarks()
            .withFaceExpressions()
            .withAgeAndGender()
            .withFaceDescriptors()
        const resizedDetections = faceapi.resizeResults(detections, canvasSize)
        const faceMatcher = new faceapi.FaceMatcher(labels, 0.6)
        const results = resizedDetections.map(d =>
            faceMatcher.findBestMatch(d.descriptor)
        )
  
        canvas.getContext('2d').clearRect(0, 0, canvas.width, canvas.height)
        faceapi.draw.drawDetections(canvas, resizedDetections)
        results.forEach((result, index) => {
            const box = resizedDetections[index].detection.box
            // const { label, distance } = result
            // new faceapi.draw.DrawTextField([
            //     `${label} (${parseInt(distance * 100, 10)})`
            // ], box.bottomLeft).draw(canvas)
            // const drawBox = new faceapi.draw.DrawBox(box, { label: result.toString() })
            // drawBox.draw(canvas)
        
            if(!result.toString().includes('unknown')){

  
                let pessoa = result.toString().split("(")[0]
                let porcentChance = parseInt(result.toString().split("(")[1].replace(/\D/g, ""));
               // console.log(pessoa + ' chance ' + porcentChance)
                if(porcentChance < 50){
                    const options = { boxColor: "#00FA9A" }
                    const drawBox = new faceapi.draw.DrawBox(box, options)
                    drawBox.draw(canvas)
                    //test()
                    window.location.href = './src/controllers/general/presenceController.php?pessoa=' + pessoa
                }
            }
        })
    }, 500)
})

// async function test() {
//     console.log('start timer');
//     await new Promise(resolve => setTimeout(resolve, 4000));
//     console.log('after 1 second');
// }

async function makeRequest() {
    // await code here
    const url = './src/controllers/ajax/getPersonData.ajax.php'
    let result = await getPersonRegistrations("POST", url);
    // code below here will only execute when await getPersonRegistrations() finished loading
    return result;
}


function getPersonRegistrations(method, url)
{
    // var formData = new FormData();
    // const phpScript = './src/controllers/ajax/getPersonData.ajax.php'
    // formData.append('action', 'getAllRegistration')
    // const xhr = new XMLHttpRequest();
    // xhr.open("POST", phpScript, true);
    // xhr.send(formData);
    // xhr.onreadystatechange = () => { // Call a function when the state changes.
    //     if (xhr.readyState === XMLHttpRequest.DONE && xhr.status === 200) {
    //         console.log(xhr)
    //         return xhr.response
    //     }
    // }

    return new Promise(function (resolve, reject) {
        var formData = new FormData();
        formData.append('action', 'getAllRegistration')
        let xhr = new XMLHttpRequest();
        xhr.open(method, url, true);
        xhr.onload = function () {
            if (this.status >= 200 && this.status < 300) {
                resolve(xhr.response);
            } else {
                reject({
                    status: this.status,
                    statusText: xhr.statusText
                });
            }
        };
        xhr.onerror = function () {
            reject({
                status: this.status,
                statusText: xhr.statusText
            });
        };
        xhr.send(formData);
    });
}

